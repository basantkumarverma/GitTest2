/*@Author:  Accenture@Name: NeMO_assetUtilCtrl @CreateDate: 26/05/2016@Description:  This is a generic class to call methods used in NeMO_PC_CreditProposalSublineCreation class 
@CreateDate: 10/10/2017@Description:  NCR-45: Migrated Live Vehicles from NOLS do not have Set Live Flag set to True on Nemo causing issues for Transfer and Insolvency Novation scenarios */public without sharing class NeMO_assetUtilCtrl{    public static list<asset> allAssetFromAllFranchisee(set<string> allReplacementRegNumber)    {        system.debug('-----allReplacementRegNumber---------------'+allReplacementRegNumber);        list<asset> assetList1=[select id, lease_start_date__c, lease_termination_date__c,Reg_No__c,set_live__c,lease_planned_end_date__c,Contract_End_Date__c        from asset where Reg_No__c in: allReplacementRegNumber  limit :Limits.getLimitQueryRows()]; //and set_live__c=true         system.debug('-----assetList1---------------'+assetList1);        return assetList1;    }        /**     * Name         :   validateReplacementVehicle     * Description  :   This method is for validation of Replacement vehicle registration.this method is called                         from NeMO_PC_CreditProposalSublineCreation controller.                                              If the new registration number has been set live and not been terminated.Refer CR076 for more details     * Paramaters   :   List of sublineWrapper and reason of Proposal from Credit Proposal     * Return       :   Set<string> i.e registration number which is found in validation query    */    public static set<string> validateReplacementVehicle(List<NeMO_PC_CreditProposalEvaluationCtrl.sublineWrapper> lstCPData, string strReasonProposal){        system.debug('\n--lstCPData--'+lstCPData);                // set of registration numbers of assets (Vehicle)        set<string> setRegNumber = new set<string>();                // set if ids of current asset(Vehicle) as it has to be exluded in vaidation        set<string> setVehicleId = new set<string>();                // iteration to get asset registration number ans asset id        for(NeMO_PC_CreditProposalEvaluationCtrl.sublineWrapper CPData : lstCPData ){                      if(!string.isBlank(CPData.sub.replacement_reg_number__c)){                                // adding asset(Vehicle) ids to set                setVehicleId.add(CPData.attachQuoteId);                                // adding asset(Vehicle) registration number to set                setRegNumber.add(CPData.sub.replacement_reg_number__c);            }        }        system.debug('\n--setVehicleId--'+setVehicleId+'\n--setRegNumber--'+setRegNumber+'\n--strReasonProposal--'+strReasonProposal+'\n--Empty--'+setRegNumber.isEmpty());        return fetchValidVehicle(setRegNumber, strReasonProposal, setVehicleId);    }        /**     * Name         :   validateReplacementVehicle     * Description  :   This method is for validation of Replacement vehicle registration.this method is called                         from NeMO_PC_CreditProposalSublineCreation controller.                                              If the new registration number has been set live and not been terminated.Refer CR076 for more details     * Paramaters   :   List of sublineWrapper and reason of Proposal from Credit Proposal     * Return       :   Set<string> i.e registration number which is found in validation query    */    public static set<string> validateReplacementVehicle(List<NeMO_PC_CreditProposalSublineCreation.sublineWrapper> lstCPData, string strReasonProposal){        system.debug('\n--lstCPData--'+lstCPData);                // set of registration numbers of assets (Vehicle)        set<string> setRegNumber = new set<string>();                // set if ids of current asset(Vehicle) as it has to be exluded in vaidation        set<string> setVehicleId = new set<string>();                // iteration to get asset registration number ans asset id        for(NeMO_PC_CreditProposalSublineCreation.sublineWrapper CPData : lstCPData ){                      if(!string.isBlank(CPData.sub.replacement_reg_number__c)){                                // adding asset(Vehicle) ids to set                setVehicleId.add(CPData.attachQuoteId);                                // adding asset(Vehicle) registration number to set                setRegNumber.add(CPData.sub.replacement_reg_number__c);            }        }        system.debug('\n--setVehicleId--'+setVehicleId+'\n--setRegNumber--'+setRegNumber+'\n--strReasonProposal--'+strReasonProposal+'\n--Empty--'+setRegNumber.isEmpty());        return fetchValidVehicle(setRegNumber, strReasonProposal, setVehicleId);    }        /**     * Name         :   fetchValidVehicle     * Description  :   This method is pull valid registation number based upon the registration number enetered by the user.                           * Paramaters   :   @setRegNum  List of registration number enter by user      *                  @strReasonProposal current CP status     *                  @setVehicleId current asset records as it has to be removed     * Return       :   Set<string> i.e registration number which is found in validation query    */    private static set<string> fetchValidVehicle(set<string> setRegNum, string strReasonProposal, set<string> setVehicleId){                // run validation only if we have any asset(Vehicle) entered by user        if(!setRegNum.isEmpty()){            //code to get asset(Vehicle) for validation            for(Asset recAsset : [SELECT Reg_No__c                                        FROM Asset                                        WHERE Reg_No__c IN :setRegNum                                        AND lease_start_date__c != NULL                                    AND lease_planned_end_date__c != NULL //NCR-45 Added Extra Condition                                        AND lease_termination_date__c = NULL                                        //AND set_live__c = TRUE TR 15852                                        //AND LP_CreditRequest__r.Reason__c =: strReasonProposal                                        AND Id NOT IN: setVehicleId]                                ){                        system.debug('\n--recAsset--'+recAsset);                                //adding registration number which will be return and displayed in error method                if(setRegNum.contains(recAsset.Reg_No__c)){                    setRegNum.remove(recAsset.Reg_No__c);                }            }            system.debug('\n--setRegNum--'+setRegNum);                    //return the registration number which are not found in query and will be displayed in Error message            return setRegNum;        }        return new set<string>();    }            /**     * Name         :   checkRegNumberSubline     * Description  :   This method will check if the reg number entered by the user is allowed to be used     * Parameters   :   @allReplacementRegNumber Re numbers enetered by user     *              :   @submitnEvalutionList wrapper class from submline     * Return       :   It will return the string in case id the reg number is not valid     */    public static string checkRegNumberSubline(set<string> allReplacementRegNumber,list<NeMO_PC_CreditProposalSublineCreation.sublineWrapper> submitnEvalutionList){               string combinedError=NeMO_GlobalConstant.BLANK;        system.debug('\n--allReplacementRegNumber--'+allReplacementRegNumber);                //for line of credit - check in same franchise        /**         * Following line of code is commented for CR 076        list<string> statusAsset=new list<string>{'Cancelled','Closed','Declined','Created'};        **/        list<string> statusAsset=new list<string>{'Cancelled','Closed','Declined'};                /**          * Code to create list of user under same owner          * AS per CR 076 we need to check the all user under franchee account         * Assuming that it will always return 1 record         **/        MAP<id,map<id,User>> mapAccountUser = NeMO_GlobalUtill.fetchAllFranchiseeUser(new list<id>{UserInfo.getUserId()});        system.debug('\n--mapAccountUser--'+mapAccountUser);                 // will save user ids of current franchisse account        set<id> setUserId = new set<id>();        for(map<id,User> userDetails : mapAccountUser.values()){             setUserId.addAll(userDetails.keySet());        }        system.debug('\n--setUserId--'+setUserId);                List<asset> checkRegistrationNum=new List<asset>();                /**         * Adding owner id filter in current query for CR 076         * Reason we need to check for all user in current franchee account         */        checkRegistrationNum = [select Id,subline_number__c,                                        status,                                        LP_CreditRequest__r.overall_status__c,                                        replacement_reg_number__c,                                        set_live__c,set_live_date__c,                                        LP_CreditRequest__r.Credit_Proposal_Stars_Id__c                                     FROM asset                                     WHERE (                                             (set_live__c=true AND set_live_date__c = LAST_N_DAYS:180)                                                 OR                                                 (status NOT in:statusAsset                                                     //AND set_live__c=false  //NCR-45: Removed Condition                                                    AND lease_termination_date__c != NULL  //NCR-45: Added Extra Condition                                                    AND ((LP_CreditRequest__r.overall_status__c !=:NeMO_GlobalConstant.CREDITREQUESTSTATUS)                                                     AND (LP_CreditRequest__r.overall_status__c !=:NeMO_GlobalConstant.CREDITREQUESTSTATUSSUBMITTED))                                                )                                            )                                             AND replacement_reg_number__c  in: allReplacementRegNumber                                            AND LP_CreditRequest__r.OwnerId IN : setUserId                                     AND lease_start_date__c != NULL //NCR-45: Added Extra Condition                                       AND lease_planned_end_date__c != NULL  //NCR-45: Added Extra Condition                                           LIMIT:Limits.getLimitQueryRows()];//note: add condition for the sme Franchisee                system.debug('\n--checkRegistrationNum--'+checkRegistrationNum+'\n--submitnEvalutionList--'+submitnEvalutionList);        if(!checkRegistrationNum.IsEmpty()){            integer pageNo = NeMO_GlobalConstant.NUMONE;            for(NeMO_PC_CreditProposalSublineCreation.sublineWrapper  myWrapperList : submitnEvalutionList){                system.debug('\n--myWrapperList--'+myWrapperList);                                for(asset regNoList : checkRegistrationNum){                    if( regNoList.replacement_reg_number__c == myWrapperList.sub.replacement_reg_number__c                         && myWrapperList.ReplacementvehicleFlagCB                         && string.valueof(regNoList.id)!= myWrapperList.attachQuoteId){                                                    string num = myWrapperList.sub.replacement_reg_number__c;                        string proposalnum = regNoList.LP_CreditRequest__r.Credit_Proposal_Stars_Id__c ;                        integer rownum = myWrapperList.rowNumber;                        pageNo = NeMO_PC_CreditProposalSublineCreation.pagenumberForError(rownum);                        //string error = 'Replacement vehicle registration number '+num+' has already been used on credit proposal '+proposalnum+ ' in ';                                                string error='Replacement vehicle registration number '+num+' has already been used on credit proposal '+proposalnum+ '/'+ regNoList.subline_number__c;                                                if(combinedError == NeMO_GlobalConstant.BLANK){                            combinedError = error;                            /*+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>' ;  */                        }                        else{                            combinedError = combinedError+'</br>'+'&nbsp;&nbsp;'+error;                            /*+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>';  */                        }                        /*string error = 'Replacement vehicle registration number '+num+' has already been used on credit proposal '+proposalnum+ ' in ';                        if(combinedError == NeMO_GlobalConstant.BLANK){                            combinedError = error+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>' ;                          }                        else{                            combinedError = combinedError+'</br>'+'&nbsp;&nbsp;'+error+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>';                          }*/                        break;                    }                }            }         }        system.debug('----combinedError-----'+combinedError);        return combinedError;    }         /**     * Name         :   checkRegNumberEv     * Description  :   This method will check if the reg number entered by the user is allowed to be used     * Parameters   :   @allReplacementRegNumber Re numbers enetered by user     *              :   @submitnEvalutionList wrapper class from submline     * Return       :   It will return the string in case id the reg number is not valid     */    public static string checkRegNumberEv(set<string> allReplacementRegNumber,list<NeMO_PC_CreditProposalEvaluationCtrl.sublineWrapper> submitnEvalutionList){                        string combinedError=NeMO_GlobalConstant.BLANK;        system.debug('\n--allReplacementRegNumber--'+allReplacementRegNumber);                //for line of credit - check in same franchise        /**         * Following line of code is commented for CR 076        list<string> statusAsset=new list<string>{'Cancelled','Closed','Declined','Created'};        **/        list<string> statusAsset=new list<string>{'Cancelled','Closed','Declined'};                /**          * Code to create list of user under same owner          * AS per CR 076 we need to check the all user under franchee account         * Assuming that it will always return 1 record         **/        MAP<id,map<id,User>> mapAccountUser = NeMO_GlobalUtill.fetchAllFranchiseeUser(new list<id>{UserInfo.getUserId()});        system.debug('\n--mapAccountUser--'+mapAccountUser);                 // will save user ids of current franchisse account        set<id> setUserId = new set<id>();        for(map<id,User> userDetails : mapAccountUser.values()){             setUserId.addAll(userDetails.keySet());        }        system.debug('\n--setUserId--'+setUserId);                List<asset> checkRegistrationNum=new List<asset>();                /**         * Adding owner id filter in current query for CR 076         * Reason we need to check for all user in current franchee account         */        checkRegistrationNum = [select Id,subline_number__c,                                        status,                                        LP_CreditRequest__r.overall_status__c,                                        replacement_reg_number__c,                                        set_live__c,set_live_date__c,                                        LP_CreditRequest__r.Credit_Proposal_Stars_Id__c                                     FROM asset                                     WHERE (                                                (set_live__c=true AND set_live_date__c = LAST_N_DAYS:180)                                                 OR                                                 (status NOT in:statusAsset                                                     //AND set_live__c=false //NCR-45: Removed Condition                                                    AND lease_planned_end_date__c != NULL //NCR-45: Added Extra Condition                                                    AND ((LP_CreditRequest__r.overall_status__c !=:NeMO_GlobalConstant.CREDITREQUESTSTATUS)                                                     AND (LP_CreditRequest__r.overall_status__c !=:NeMO_GlobalConstant.CREDITREQUESTSTATUSSUBMITTED))                                                )                                            )                                             AND replacement_reg_number__c  in: allReplacementRegNumber                                            AND LP_CreditRequest__r.OwnerId IN : setUserId                                     AND lease_start_date__c != NULL //NCR-45: Added Extra Condition                                       AND lease_planned_end_date__c != NULL  //NCR-45: Added Extra Condition                                           LIMIT:Limits.getLimitQueryRows()];//note: add condition for the sme Franchisee                system.debug('\n--checkRegistrationNum--'+checkRegistrationNum+'\n--submitnEvalutionList--'+submitnEvalutionList);                if(!checkRegistrationNum.IsEmpty()){            integer pageNo=NeMO_GlobalConstant.NUMONE;                        for(NeMO_PC_CreditProposalEvaluationCtrl.sublineWrapper  myWrapperList : submitnEvalutionList){                system.debug('\n--myWrapperList--'+myWrapperList);                                for(asset regNoList : checkRegistrationNum){                    if( regNoList.replacement_reg_number__c == myWrapperList.sub.replacement_reg_number__c                         && myWrapperList.ReplacementvehicleFlagCB                         && string.valueof(regNoList.id)!= myWrapperList.attachQuoteId){                                                string num = myWrapperList.sub.replacement_reg_number__c;                        string proposalnum = regNoList.LP_CreditRequest__r.Credit_Proposal_Stars_Id__c ;                        integer rownum=myWrapperList.rowNumber;                        pageNo=NeMO_PC_CreditProposalEvaluationCtrl.pagenumberForError(rownum);                        //string error = 'Replacement vehicle registration number '+num+' has already been used on credit proposal '+proposalnum+ ' in ';                        string error='Replacement vehicle registration number '+num+' has already been used on credit proposal '+proposalnum+ '/'+ regNoList.subline_number__c;                        if(combinedError == NeMO_GlobalConstant.BLANK){                            combinedError = error;                            /*+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>' ;  */                        }                        else{                            combinedError = combinedError+'</br>'+'&nbsp;&nbsp;'+error;                            /*+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>';  */                        }                        /*string error = 'Replacement vehicle registration number '+num+' has already been used on credit proposal '+proposalnum+ ' in ';                        if(combinedError == NeMO_GlobalConstant.BLANK){                            combinedError = error+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>' ;                          }                        else{                            combinedError = combinedError+'</br>'+'&nbsp;&nbsp;'+error+'<b>: '+myWrapperList.SublineHeading+'</b> Page: <a href="javascript:return(0)" onclick="PageLink('+pageNo+')">'+ pageNo+'</a>';                          }*/                        break;                    }                }            }         }        system.debug('----combinedError-----'+combinedError);        return combinedError;    }}
